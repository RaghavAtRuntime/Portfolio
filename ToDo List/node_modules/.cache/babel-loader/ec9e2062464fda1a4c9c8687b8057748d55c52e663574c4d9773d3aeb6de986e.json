{"ast":null,"code":"// Co-authored by @gadicc, @PythonCreator27 and @huned.\nconst queryOptionsDefaults = {\n  useYfid: true,\n  interval: \"1d\",\n  includePrePost: true,\n  events: \"div|split|earn\",\n  lang: \"en-US\",\n  return: \"array\"\n};\n/* --- array input, typed output, honor \"return\" param --- */\n// TODO: make this a deprecration passthrough\nexport const _chart = chart;\nexport default async function chart(symbol, queryOptionsOverrides, moduleOptions) {\n  var _a, _b, _c;\n  const returnAs = (queryOptionsOverrides === null || queryOptionsOverrides === void 0 ? void 0 : queryOptionsOverrides.return) || \"array\";\n  const result = await this._moduleExec({\n    moduleName: \"chart\",\n    query: {\n      assertSymbol: symbol,\n      url: \"https://${YF_QUERY_HOST}/v8/finance/chart/\" + symbol,\n      schemaKey: \"#/definitions/ChartOptions\",\n      defaults: queryOptionsDefaults,\n      overrides: queryOptionsOverrides,\n      transformWith(queryOptions) {\n        if (!queryOptions.period2) queryOptions.period2 = new Date();\n        const dates = [\"period1\", \"period2\"];\n        for (const fieldName of dates) {\n          const value = queryOptions[fieldName];\n          if (value instanceof Date) queryOptions[fieldName] = Math.floor(value.getTime() / 1000);else typeof value === \"string\";\n          queryOptions[fieldName] = Math.floor(new Date(value).getTime() / 1000);\n        }\n        if (queryOptions.period1 === queryOptions.period2) {\n          throw new Error(\"yahooFinance.chart() options `period1` and `period2` \" + \"cannot share the same value.\");\n        }\n        // Don't pass this on to Yahoo\n        delete queryOptions.return;\n        return queryOptions;\n      }\n    },\n    result: {\n      schemaKey: \"#/definitions/ChartResultObject\",\n      transformWith(result) {\n        if (!result.chart) throw new Error(\"Unexpected result: \" + JSON.stringify(result));\n        const chart = result.chart.result[0];\n        // If there are no quotes, chart.timestamp will be empty, but Yahoo also\n        // gives us chart.indicators.quotes = [{}].  Let's clean that up and\n        // deliver an empty array rather than an invalid ChartIndicatorQuote/\n        if (!chart.timestamp) {\n          if (chart.indicators.quote.length !== 1) throw new Error(\"No timestamp with quotes.length !== 1, please report with your query\");\n          if (Object.keys(chart.indicators.quote[0]).length !== 0)\n            // i.e. {}\n            throw new Error(\"No timestamp with unexpected quote, please report with your query\" + JSON.stringify(chart.indicators.quote[0]));\n          chart.indicators.quote.pop();\n        }\n        return chart;\n      }\n    },\n    moduleOptions\n  });\n  if (returnAs === \"object\") {\n    return result;\n  } else if (returnAs === \"array\") {\n    const timestamp = result.timestamp;\n    /*\n    seems as though yahoo inserts extra quotes at the event times, so no need.\n    if (result.events) {\n      for (let event of [\"dividends\", \"splits\"]) {\n        // @ts-ignore\n        if (result.events[event])\n          // @ts-ignore\n          timestamp = timestamp.filter((ts) => !result.events[event][ts]);\n      }\n    }\n    */\n    // istanbul ignore next\n    if (timestamp && ((_a = result === null || result === void 0 ? void 0 : result.indicators) === null || _a === void 0 ? void 0 : _a.quote) && result.indicators.quote[0].high.length !== timestamp.length) {\n      console.log({\n        origTimestampSize: result.timestamp && result.timestamp.length,\n        filteredSize: timestamp.length,\n        quoteSize: result.indicators.quote[0].high.length\n      });\n      throw new Error(\"Timestamp count mismatch, please report this with the query you used\");\n    }\n    const result2 = {\n      meta: result.meta,\n      quotes: timestamp ? new Array(timestamp.length) : []\n    };\n    const adjclose = (_c = (_b = result === null || result === void 0 ? void 0 : result.indicators) === null || _b === void 0 ? void 0 : _b.adjclose) === null || _c === void 0 ? void 0 : _c[0].adjclose;\n    if (timestamp) for (let i = 0; i < timestamp.length; i++) {\n      result2.quotes[i] = {\n        date: new Date(timestamp[i] * 1000),\n        high: result.indicators.quote[0].high[i],\n        volume: result.indicators.quote[0].volume[i],\n        open: result.indicators.quote[0].open[i],\n        low: result.indicators.quote[0].low[i],\n        close: result.indicators.quote[0].close[i]\n      };\n      if (adjclose) result2.quotes[i].adjclose = adjclose[i];\n    }\n    if (result.events) {\n      result2.events = {};\n      for (const event of [\"dividends\", \"splits\"]) {\n        if (result.events[event]) result2.events[event] = Object.values(result.events[event]);\n      }\n    }\n    return result2;\n  }\n  // TypeScript runtime validation ensures no other values for\n  // \"returnAs\" are possible.\n}","map":{"version":3,"names":["queryOptionsDefaults","useYfid","interval","includePrePost","events","lang","return","_chart","chart","symbol","queryOptionsOverrides","moduleOptions","_a","_b","_c","returnAs","result","_moduleExec","moduleName","query","assertSymbol","url","schemaKey","defaults","overrides","transformWith","queryOptions","period2","Date","dates","fieldName","value","Math","floor","getTime","period1","Error","JSON","stringify","timestamp","indicators","quote","length","Object","keys","pop","high","console","log","origTimestampSize","filteredSize","quoteSize","result2","meta","quotes","Array","adjclose","i","date","volume","open","low","close","event","values"],"sources":["/Users/raghavsinha/sandbox/node_modules/yahoo-finance2/dist/esm/src/modules/chart.js"],"sourcesContent":["// Co-authored by @gadicc, @PythonCreator27 and @huned.\nconst queryOptionsDefaults = {\n    useYfid: true,\n    interval: \"1d\",\n    includePrePost: true,\n    events: \"div|split|earn\",\n    lang: \"en-US\",\n    return: \"array\",\n};\n/* --- array input, typed output, honor \"return\" param --- */\n// TODO: make this a deprecration passthrough\nexport const _chart = chart;\nexport default async function chart(symbol, queryOptionsOverrides, moduleOptions) {\n    var _a, _b, _c;\n    const returnAs = (queryOptionsOverrides === null || queryOptionsOverrides === void 0 ? void 0 : queryOptionsOverrides.return) || \"array\";\n    const result = (await this._moduleExec({\n        moduleName: \"chart\",\n        query: {\n            assertSymbol: symbol,\n            url: \"https://${YF_QUERY_HOST}/v8/finance/chart/\" + symbol,\n            schemaKey: \"#/definitions/ChartOptions\",\n            defaults: queryOptionsDefaults,\n            overrides: queryOptionsOverrides,\n            transformWith(queryOptions) {\n                if (!queryOptions.period2)\n                    queryOptions.period2 = new Date();\n                const dates = [\"period1\", \"period2\"];\n                for (const fieldName of dates) {\n                    const value = queryOptions[fieldName];\n                    if (value instanceof Date)\n                        queryOptions[fieldName] = Math.floor(value.getTime() / 1000);\n                    else\n                        typeof value === \"string\";\n                    queryOptions[fieldName] = Math.floor(new Date(value).getTime() / 1000);\n                }\n                if (queryOptions.period1 === queryOptions.period2) {\n                    throw new Error(\"yahooFinance.chart() options `period1` and `period2` \" +\n                        \"cannot share the same value.\");\n                }\n                // Don't pass this on to Yahoo\n                delete queryOptions.return;\n                return queryOptions;\n            },\n        },\n        result: {\n            schemaKey: \"#/definitions/ChartResultObject\",\n            transformWith(result) {\n                if (!result.chart)\n                    throw new Error(\"Unexpected result: \" + JSON.stringify(result));\n                const chart = result.chart.result[0];\n                // If there are no quotes, chart.timestamp will be empty, but Yahoo also\n                // gives us chart.indicators.quotes = [{}].  Let's clean that up and\n                // deliver an empty array rather than an invalid ChartIndicatorQuote/\n                if (!chart.timestamp) {\n                    if (chart.indicators.quote.length !== 1)\n                        throw new Error(\"No timestamp with quotes.length !== 1, please report with your query\");\n                    if (Object.keys(chart.indicators.quote[0]).length !== 0)\n                        // i.e. {}\n                        throw new Error(\"No timestamp with unexpected quote, please report with your query\" +\n                            JSON.stringify(chart.indicators.quote[0]));\n                    chart.indicators.quote.pop();\n                }\n                return chart;\n            },\n        },\n        moduleOptions,\n    }));\n    if (returnAs === \"object\") {\n        return result;\n    }\n    else if (returnAs === \"array\") {\n        const timestamp = result.timestamp;\n        /*\n        seems as though yahoo inserts extra quotes at the event times, so no need.\n        if (result.events) {\n          for (let event of [\"dividends\", \"splits\"]) {\n            // @ts-ignore\n            if (result.events[event])\n              // @ts-ignore\n              timestamp = timestamp.filter((ts) => !result.events[event][ts]);\n          }\n        }\n        */\n        // istanbul ignore next\n        if (timestamp &&\n            ((_a = result === null || result === void 0 ? void 0 : result.indicators) === null || _a === void 0 ? void 0 : _a.quote) &&\n            result.indicators.quote[0].high.length !== timestamp.length) {\n            console.log({\n                origTimestampSize: result.timestamp && result.timestamp.length,\n                filteredSize: timestamp.length,\n                quoteSize: result.indicators.quote[0].high.length,\n            });\n            throw new Error(\"Timestamp count mismatch, please report this with the query you used\");\n        }\n        const result2 = {\n            meta: result.meta,\n            quotes: timestamp ? new Array(timestamp.length) : [],\n        };\n        const adjclose = (_c = (_b = result === null || result === void 0 ? void 0 : result.indicators) === null || _b === void 0 ? void 0 : _b.adjclose) === null || _c === void 0 ? void 0 : _c[0].adjclose;\n        if (timestamp)\n            for (let i = 0; i < timestamp.length; i++) {\n                result2.quotes[i] = {\n                    date: new Date(timestamp[i] * 1000),\n                    high: result.indicators.quote[0].high[i],\n                    volume: result.indicators.quote[0].volume[i],\n                    open: result.indicators.quote[0].open[i],\n                    low: result.indicators.quote[0].low[i],\n                    close: result.indicators.quote[0].close[i],\n                };\n                if (adjclose)\n                    result2.quotes[i].adjclose = adjclose[i];\n            }\n        if (result.events) {\n            result2.events = {};\n            for (const event of [\"dividends\", \"splits\"]) {\n                if (result.events[event])\n                    result2.events[event] = Object.values(result.events[event]);\n            }\n        }\n        return result2;\n    }\n    // TypeScript runtime validation ensures no other values for\n    // \"returnAs\" are possible.\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}